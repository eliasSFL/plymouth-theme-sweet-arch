fun set_scaled_sprite(sprite, image, zoom) {
	sprite.SetImage(image.Scale(image.GetWidth() * zoom, image.GetHeight() * zoom));
}

fun position_sprite(sprite, x, y) {
	sprite.SetX(Window.GetWidth() * x - sprite.GetImage().GetWidth() / 2);
	sprite.SetY(Window.GetHeight() * y - sprite.GetImage().GetHeight() / 2);
}

fun ease_coefficient(percent) {
	return (percent * percent) / (percent * percent + (1 - percent) * (1 - percent));
}

fun ease_value(min, max, percent) {
	return min + ease_coefficient(percent) * (max - min);
}

fun animate_in_zoom(sprite, image, min, max, percent, x, y) {
	set_scaled_sprite(sprite, image, ease_value(min, max, percent));
	position_sprite(sprite, x, y);
}

fun animate_in_opacity(sprite, min, max, percent) {
	sprite.SetOpacity(ease_value(min, max, percent));
}

Window.SetBackgroundTopColor(0.121, 0, 0.227);
Window.SetBackgroundBottomColor(0.121, 0, 0.227);

LOGO = Image("logo.png");
LOGO_SPRITE = Sprite();

SPINNER = Image("spinner.png");
SPINNER_SPRITE = Sprite(SPINNER);
position_sprite(SPINNER_SPRITE, 0.5, 0.8);
SPINNER_SPRITE.SetOpacity(0);

counter = 0;
MIN_ITERATIONS = 150;
MAX_ITERATIONS = 250;
animation_started = false;
normal_mode_entered = false;

fun animate() {
	// Only animate if we're in normal mode and animation has been started
	if (!normal_mode_entered || !animation_started) {
		return;
	}
	
	++counter;
	SPINNER_SPRITE.SetImage(SPINNER.Rotate((counter % 100) * 0.06283));
	if (MIN_ITERATIONS < counter && counter <= MAX_ITERATIONS) {
		percent = (counter - MIN_ITERATIONS) / (MAX_ITERATIONS - MIN_ITERATIONS);

		animate_in_opacity(SPINNER_SPRITE, 0, 1, percent);
		animate_in_opacity(LOGO_SPRITE, 0, 1, percent);
		animate_in_zoom(LOGO_SPRITE, LOGO, 0, 1, percent, 0.5, 0.45);
	}
}

Plymouth.SetRefreshFunction(animate);

// ----------------------------------------- Dialog --------------------------------

status = "password";  // Start in password mode
sprite_prompt = Sprite();

fun dialog_setup() {
	local.box;
	local.lock;
	local.entry;
	local.prompt_sprite;

	box.image = Image("box.png");
	lock.image = Image("lock.png");
	entry.image = Image("entry.png");

	box.sprite = Sprite();
	box.sprite.SetImage(box.image);
	box.x = Window.GetX() + Window.GetWidth() / 2 - box.image.GetWidth()/2;
	box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
	box.z = 10000;
	box.sprite.SetPosition(box.x, box.y, box.z);

	lock.sprite = Sprite();
	lock.sprite.SetImage(lock.image);
	lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
	lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
	lock.z = box.z + 1;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);

	entry.sprite = Sprite();
	entry.sprite.SetImage(entry.image);
	entry.x = lock.x + lock.image.GetWidth();
	entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
	entry.z = box.z + 1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);

	prompt_sprite = Sprite();
	prompt_sprite.SetPosition(box.x, box.y - 20, box.z);

	global.dialog.box = box;
	global.dialog.lock = lock;
	global.dialog.entry = entry;
	global.dialog.bullet_image = Image("bullet.png");
	global.dialog.prompt_sprite = prompt_sprite;
	dialog_opacity(1);
}

fun dialog_opacity(opacity) {
	dialog.box.sprite.SetOpacity(opacity);
	dialog.lock.sprite.SetOpacity(opacity);
	dialog.entry.sprite.SetOpacity(opacity);
	dialog.prompt_sprite.SetOpacity(opacity);
	for (index = 0; dialog.bullet[index]; index++) {
		dialog.bullet[index].sprite.SetOpacity(opacity);
	}
}

fun display_normal_callback() {
	global.status = "normal";
	global.normal_mode_entered = true;
	global.animation_started = true;
	
	if (global.dialog) {
		dialog_opacity(0);
	}
	
	// Reset counter to start animation from beginning
	counter = 0;
	
	// Ensure animation elements are visible
	SPINNER_SPRITE.SetOpacity(0);
	LOGO_SPRITE.SetOpacity(0);
}

fun display_password_callback(prompt, bullets) {
	global.status = "password";
	global.animation_started = false;
	
	if (!global.dialog) {
		dialog_setup();
	}
	else {
		dialog_opacity(1);
	}
	
	// Hide the normal animation elements
	SPINNER_SPRITE.SetOpacity(0);
	LOGO_SPRITE.SetOpacity(0);

	dialog.prompt_sprite.SetImage(Image.Text(prompt, 1.0, 1.0, 1.0));
	for (index = 0; dialog.bullet[index] || index < bullets; index++) {
		if (!dialog.bullet[index]) {
			dialog.bullet[index].sprite = Sprite();
			dialog.bullet[index].sprite.SetImage(dialog.bullet_image);
			dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
			dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
			dialog.bullet[index].z = dialog.entry.z + 1;
			dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
		}
		if (index < bullets) {
			dialog.bullet[index].sprite.SetOpacity(1);
		}
		else {
			dialog.bullet[index].sprite.SetOpacity(0);
		}
	}
}

fun display_message_callback(prompt) {
	prompt = Image.Text(prompt, 1.0, 1.0, 1.0);
	sprite_prompt.SetImage(prompt);
	sprite_prompt.SetPosition(Window.GetX() + (Window.GetWidth() - prompt.GetWidth()) / 2, Window.GetY() + Window.GetHeight() * 0.93, 2);
}

// Initialize dialog at startup to ensure all icons are loaded in memory
dialog_setup(); 
dialog_opacity(1);  // Show dialog initially

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetMessageFunction(display_message_callback);
